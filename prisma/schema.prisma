// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // For credentials authentication
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // User preferences
  preferences UserPreferences?
  
  // User's mood history
  moods       MoodDetection[]
  
  // Saved playlists
  playlists   Playlist[]
  
  // User feedback for learning
  feedback    UserFeedback[]

  @@map("users")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Music preferences
  preferredGenres String[]
  preferredArtists String[]
  energyLevel     Float?   @default(0.5) // 0.0 to 1.0
  
  // Mood detection preferences
  enableCamera    Boolean  @default(true)
  enableTextInput Boolean  @default(true)
  
  // Privacy settings
  shareData       Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model MoodDetection {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Detected mood information
  mood         String   // happy, sad, angry, surprise, fear, disgust, neutral
  confidence   Float    // 0.0 to 1.0
  method       String   // "facial" or "text"
  inputData    String?  // Original text input for text analysis
  
  // Contextual information
  timestamp    DateTime @default(now())
  sessionId    String?  // To group moods in a session
  
  // Associated playlist recommendation
  recommendedPlaylist Playlist?

  @@map("mood_detections")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  
  // Owner information
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Mood association
  moodDetectionId String? @unique
  moodDetection   MoodDetection? @relation(fields: [moodDetectionId], references: [id])
  
  // Playlist metadata
  mood        String?  // The mood this playlist is designed for
  genre       String?
  energy      Float?   // Energy level 0.0 to 1.0
  
  // Spotify integration
  spotifyPlaylistId String?
  tracks            PlaylistTrack[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("playlists")
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  // Track information from Spotify
  spotifyTrackId String
  name           String
  artist         String
  album          String?
  duration       Int?     // Duration in milliseconds
  previewUrl     String?
  imageUrl       String?
  
  // Position in playlist
  position       Int
  
  createdAt      DateTime @default(now())

  @@unique([playlistId, position])
  @@map("playlist_tracks")
}

model UserFeedback {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Feedback type
  type             String   // "mood_accuracy", "song_like", "song_dislike", "playlist_rating"
  
  // Related entities
  moodDetectionId  String?
  playlistId       String?
  trackSpotifyId   String?
  
  // Feedback data
  rating           Float?   // 1.0 to 5.0 for ratings
  comment          String?
  
  createdAt        DateTime @default(now())

  @@map("user_feedback")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
